<?xml version="1.0"?>
<project name="Build" xmlns="http://nant.sf.net/schemas/nant.xsd">
  <property name="build.dir" 			      value="${directory::get-current-directory()}" />
  <property name="tools.dir" 			      value="${environment::get-variable('BUILD_TOOLS')}" />
  <property name="nunit.dir" 			      value="${tools.dir}\nunit" />
  <property name="nantcontrib.dir" 			value="${tools.dir}\nantcontrib" />
  <property name="nantcontrib.file"			value="${nantcontrib.dir}\NAnt.Contrib.Tasks.dll" />
  <property name="svn.file"             value="${tools.dir}\\subversion\bin\svn.exe" />
  <property name="release.keystore"     value="\\subversion\releases\keystore\release.keystore" />
  <property name="project.dir"          value="MyFolder" />
  <property name="project.name"         value="MyProject.csproj" />
  <property name="solution.name"        value="MySolution.sln" />
  <property name="release.dir"          value="${build.dir}\${project.name}\bin\Release" />
  <property name="built.release.dir"    value="\\subversion\releases\Versions" />
  <property name="andrioid.manifest.file" value="${build.dir}\Bailiff System App\Properties\AndroidManifest.xml" />
  <property name="ftp.webserver.dir"      value="ftp://username:password@101.101.101.101" />
  <property name="web.service.uat.url"    value="55.221.17.124" />
  <property name="web.service.live.url"   value="55.221.17.117" />
  <property name="web.reference.file"     value="${build.dir}\{project.name}\Web References\Service\portal.wsdl" />
    
  <!--These values are set by the build script-->
  <property name="android.version.code"           value="" overwrite="true" />
  <property name="android.version.name"           value="" overwrite="true" />
  <property name="built.release.version.file"     value="" overwrite="true" />
  <property name="svn.latest.revision.number"     value="0" overwrite="true"/>
  <property name="built.release.version.dir"      value="" overwrite="true" />
  <!--This property determines whether the build is for LIVE or UAT by checking the URL of the web reference as contained within portal.wsdl-->
  <!--Valid vaues are either UAT if the URL or LIVE-->
  <property name="environment.type"               value="" overwrite="true" />

  <!--This value will need to be changed for different branches!-->
  <property name="svn.repository.path"            value="https://subversion:444/svn/REPO/branches/VERSION1/" />

  <property name="verbose"			      	value="false" overwrite="false" />
  <property name="config.type"		      value="Debug" />

  <property name="nant.onfailure" 			value="Failure"/>
  <property name="nant.onsuccess" 			value="Success"/>
  
  <!-- Tell Nant what the current framework version to use is -->
  <property name="nant.settings.currentframework" value="net-4.0" />

  <tstamp verbose="${verbose}">
    <formatter property="year" pattern="yyyy" />
  </tstamp>

  <target name="OutputSystemInformation">
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />
    
    <echo message="Application Name: My Application" />
    <echo message="Machine name: ${environment::get-machine-name()}" />
    <echo message="Operating System: ${environment::get-operating-system()}" />
    <echo message="Username: ${environment::get-user-name()}" />

    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>
  
  <target name="ValidateTools">
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <call target="OutputSystemInformation" />
    
    <fail if="${not file::exists(nantcontrib.file)}" 	message="${nantcontrib.file} does not exist" />
    <loadtasks assembly="${nantcontrib.file}" failonerror="true" verbose="${verbose}" />
    <fail if="${not file::exists(release.keystore)}" 	message="${release.keystore} does not exist" />
    <fail if="${not file::exists(andrioid.manifest.file)}" 	message="${andrioid.manifest.file} does not exist" />
    <fail if="${not file::exists(svn.file)}" 	message="${svn.file} does not exist" />
    <fail if="${not file::exists(web.reference.file)}" 	message="${web.reference.file} does not exist" />
    
    <echo message="All Build tools appear to be present" />
    
    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="Clean" depends="ValidateTools">
    <!-- Clean up the build folder prior to starting -->
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <delete dir="${build.dir}${project.dir}\obj" failonerror="true" />
    <delete dir="${build.dir}\${project.dir}\bin" failonerror="true" />

    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

 <target name="Build" depends="Clean">
    <!-- Build the application -->
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

   <call target="GetEnvironmentType" />

   <call target="GetLatestVersionNumber" />
   <call target="GetLatestRevisionNumber" />

   <echo message="Android manifest version number ${android.version.code}" />
   <echo message="Latest SVN revision number ${svn.latest.revision.number}" />

   <!-- Actually build the solution - Clean mode -->
   <property name="build.item" value="${build.dir}\${solution.name}" />
   <property name="config.type"		value="Debug" />
   <property name="target" 			    value="clean" />
   <msbuild project="${build.item}" target="${target}" verbose="${verbose}" failonerror="true">
     <property name="Configuration" value="${config.type}" verbose="${verbose}" />
   </msbuild>
   
    <!-- Actually build the solution - Debug mode -->
    <property name="build.item" value="${build.dir}\${solution.name}" />
    <property name="config.type"		value="Debug" />
    <property name="target" 			    value="rebuild" />
    <msbuild project="${build.item}" target="${target}" verbose="${verbose}" failonerror="true">
      <property name="Configuration" value="${config.type}" verbose="${verbose}" />
    </msbuild>

    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="Release" depends="Build">
    <!-- Build the application in Release mode -->
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <!-- Actually build the solution -->
    <property name="build.item" value="${build.dir}\${solution.name}" />
    <property name="config.type"		value="Release" />
    <property name="target" 			    value="rebuild" />
    <msbuild project="${build.item}" target="${target}" verbose="${verbose}" failonerror="true">
      <property name="Configuration" value="${config.type}" verbose="${verbose}" />
    </msbuild>

    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="PackageAndroid" depends="Release">
    <!-- Package the Android APK file -->
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <!-- Actually package the APK file -->
    <property name="build.item" value="${build.dir}\${project.dir}\${project.name}" />
    <property name="config.type"		value="Release" />
    <property name="target" 			  value="PackageForAndroid" />
    <msbuild project="${build.item}" target="${target}"  verbose="${verbose}" failonerror="true">
      <property name="Configuration" value="${config.type}" verbose="${verbose}" />
    </msbuild>
    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="SignAlignAndroid" depends="PackageAndroid">
    <!-- Sign the Android APK file -->
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <!-- Actually sign the APK file -->
    <property name="build.item" value="${build.dir}\${project.dir}\${project.name}" /> 
    <property name="config.type"		value="Release" />
    <property name="target" 			  value="SignAndroidPackage" />
    <msbuild project="${build.item}" target="${target}" verbose="${verbose}" failonerror="true">
      <property name="Configuration" value="${config.type}" verbose="${verbose}" />
    </msbuild>

    <!--Determine if the signed APK file was created. If so create an -Aligned.apk copy -->
    <property name="signed.android.file" value="${release.dir}\com.capita.decri-Signed.apk" />
    <fail if="${not file::exists(signed.android.file)}" 	message="${signed.android.file} does not exist" />
    <property name="aligned.android.file" value="${release.dir}\com.capita.decri-Aligned.apk" />
    <copy file="${signed.android.file}" tofile="${aligned.android.file}" failonerror="true" verbose="${verbose}" />
    
    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="FinaliseBuild" depends="SignAlignAndroid">
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <call target="CopyToReleaseFolder" />
    <call target="ZipSource" />
    
    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <!--!!! These functions are helper functions for the build !!!-->
  <target name="CopyToReleaseFolder">
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <!--Create a new release version folder if one does not already exist-->
    <property name="built.release.version.dir" value="${built.release.dir}\Version${android.version.code}\Release${android.version.code}.${svn.latest.revision.number}" />
    <if test="${environment.type=='LIVE'}">
      <property name="built.release.version.dir" value="${built.release.dir}\Version${android.version.code}\ReleaseLIVE${android.version.name}" />
    </if>
    
    <mkdir dir="${built.release.version.dir}"
               if="${not directory::exists(built.release.version.dir)}"
               failonerror="true"
               verbose="${verbose}" />

    <!--Determine the version number e.g. 9.84-->
    <property name="built.release.android.version" value="${android.version.code}.${svn.latest.revision.number}" />
    <if test="${environment.type=='LIVE'}">
      <property name="built.release.android.version" value="${android.version.name}" />
    </if>
    <!--Determine the filename e.g. com.capita.decri-release-9.85-Aligned.apk-->
    <property name="built.release.version.file" value="com.capita.decri-release-${built.release.android.version}-Aligned.apk" />
    <!--copy the APK to the releases folder e.g. Version9\Release9.85\com.capita.decri-release-9.85-Aligned.apk -->
    <copy file="${release.dir}\com.capita.decri-Aligned.apk" tofile="${built.release.version.dir}\${built.release.version.file}" failonerror="true" verbose="${verbose}" />

    <call target="FTPFileToWebServer" />

    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="GetLatestVersionNumber">
    <!--Get the latest version number from the AndroidManifest.xml file and use this as the major version number-->
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <xmlpeek file="${andrioid.manifest.file}" xpath="/manifest/@android:versionCode" property="android.version.code" failonerror="true" verbose="${verbose}">
      <namespaces>
        <namespace prefix="android" uri="http://schemas.android.com/apk/res/android" />
      </namespaces>
    </xmlpeek>

    <xmlpeek file="${andrioid.manifest.file}" xpath="/manifest/@android:versionName" property="android.version.name" failonerror="true" verbose="${verbose}">
      <namespaces>
        <namespace prefix="android" uri="http://schemas.android.com/apk/res/android" />
      </namespaces>
    </xmlpeek>

    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="GetLatestRevisionNumber">
    <!--Get the latest SVN revision and use this as the minor version number-->
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />
    
    <exec program="${svn.file}" failonerror="true" verbose="${verbose}"
        commandline='info "${svn.repository.path}" --xml'
        output="svninfo.xml" />
    <xmlpeek failonerror="true" verbose="${verbose}"
        file="svninfo.xml"
        xpath="/info/entry/commit/@revision"
        property="svn.latest.revision.number"/>
    <delete file="svninfo.xml" failonerror="true" verbose="${verbose}" />
    
    <!--This revision number needs to be written to the AndroidManifest.xml file version name for UAT only-->
    <if test="${environment.type=='UAT'}">
      <xmlpoke file="${andrioid.manifest.file}" xpath="/manifest/@android:versionName" value="${android.version.code}.${svn.latest.revision.number}" failonerror="true" verbose="${verbose}">
        <namespaces>
          <namespace prefix="android" uri="http://schemas.android.com/apk/res/android" />
        </namespaces>
      </xmlpoke>
    </if>
    
    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="FTPFileToWebServer" if="${environment.type=='UAT'}">
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <exec program="WinSCP.com" failonerror="true" verbose="${verbose}">
      <arg value="/command" />
      <arg value="option batch abort" />
      <arg value="option confirm off" />
      <arg value="option transfer binary" />
      <arg value="open ${ftp.webserver.dir}" />
      <arg value= '"put ""${built.release.version.dir}\${built.release.version.file}"""' />
      <arg value="close" />
      <arg value="exit" />
    </exec>
    
    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="ZipSource">
    <!-- Zips the source copy prior to any manufacturing process has been applied -->
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <property name="source.zip.dir" value="${build.dir}\Source" />
    <property name="source.zip.file" value="${source.zip.dir}\Source.zip" />
    <!-- Remove source.zip if it exists -->
    <delete file="${source.zip.file}"
            if="${file::exists(source.zip.file)}"
            failonerror="true"
            verbose="${verbose}" />

    <zip zipfile="${source.zip.file}"
      ziplevel="9"
      failonerror="true"
      verbose="${verbose}" >
      <fileset>
        <include name="${build.dir}\**/*.*" />
        <exclude name="${build.dir}\**/bin/**/*.*" />
        <exclude name="${build.dir}\**/obj/**/*.*" />
        <exclude name="${build.dir}\**/*.log" />
      </fileset>
    </zip>

    <!--Copy the source zip to the releases folder so we can audit exactly what files went into the creation of the APK file-->
    <copy file="${source.zip.file}" tofile="${built.release.version.dir}\Source.zip" failonerror="true" verbose="${verbose}" />
    
    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="GetEnvironmentType">
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <xmlpeek file="${web.reference.file}" xpath="/wsdl:definitions/wsdl:service[@name='Portal']/wsdl:port[@name='PortalSoap']/soap:address/@location" property="web.reference.url" failonerror="true" verbose="${verbose}">
      <namespaces>
        <namespace prefix="soap" uri="http://schemas.xmlsoap.org/wsdl/soap/" />
        <namespace prefix="soapenc" uri="http://schemas.xmlsoap.org/soap/encoding/" />
        <namespace prefix="tm" uri="http://microsoft.com/wsdl/mime/textMatching/" />
        <namespace prefix="mime" uri="http://schemas.xmlsoap.org/wsdl/mime/" />
        <namespace prefix="tns" uri="http://www.decri.co.uk/" />
        <namespace prefix="http" uri="http://schemas.xmlsoap.org/wsdl/http/" />
        <namespace prefix="s" uri="http://www.w3.org/2001/XMLSchema" />
        <namespace prefix="soap12" uri="http://schemas.xmlsoap.org/wsdl/soap12/" />
        <namespace prefix="wsdl" uri="http://schemas.xmlsoap.org/wsdl/" />
      </namespaces>
    </xmlpeek>

    <echo message="Web reference URL is ${web.reference.url} " />
    <!--<property name="built.release.android.version" value="${string::replace(android.version.name, ' ', '-')}" />-->
    <if test="${string::contains(web.reference.url, web.service.uat.url)}">
      <property name="environment.type" value="UAT" />
      <echo message="This is a UAT build" />
    </if>
    <if test="${string::contains(web.reference.url, web.service.live.url)}">
      <property name="environment.type" value="LIVE" />
      <echo message="This is a LIVE build" />
    </if>
    
    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="Failure">
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <echo message="Build failure, please check log for details" />

    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>

  <target name="Success">
    <echo message="Task execution started at : ${script::format-to-string(datetime::now())}" />

    <echo message="Successful build"/>

    <echo message="Task execution finished at : ${script::format-to-string(datetime::now())}" />
  </target>
  
 <!-- C# utility function -->
  <script language="C#">
    <code>
      <![CDATA[
			public static string ToString(DateTime value, string format)
			{
				return value.ToString(format);
			}
			[Function("format-to-string")]
			public static string ToString(DateTime value)
			{
				return ToString(value, "dd/MM/yyyy HH:mm:ss");
			}
		]]>
    </code>
  </script>
</project>